---
import { Image } from 'astro:assets'
import Button from '@components/ui/Button.astro'
import { CollectionEntry } from 'astro:content'
import { t } from 'i18next'
import ProjectCardOverlay from './ProjectCardOverlay.astro'
import ButtonFluid from './ButtonFluid.astro'

interface Props {
	project: CollectionEntry<'projects'>
	id: number
}

const {
	project: {
		data: { title, description, tags, links, image }
	},
	id
} = Astro.props

const imageUrl = `/project-previews/${image.filename}.png`
const primaryLink = {
	href: links.live || links.repo,
	ariaLabel: links.live ? 'Link to live demo' : 'Link to repo'
}
---

<project-card
	class="border border-papery-body-text bg-papery-surface shadow-md"
	data-title={id}
>
	<article
		data-testId="card"
		class="relative flex flex-col gap-space-fl-s p-space-fl-s-m"
	>
		<ProjectCardOverlay
			{description}
			skill_tags={tags.skills}
			tech_tags={tags.tech}
			repoURL={links.repo}
			projectTitle={id}
		/>
		<Image  src={import(`../../assets/images/project-previews/${image.filename}.png`)} alt={image.alt} class="aspect-square w-full object-cover object-top"/>
<!-- <Picture
			src={import(
				`../../assets/images/project-previews/${image.filename}.png`
			)}
			alt={image.alt}
			widths={[400, 640]}
			sizes="(min-width: 640px) 46vw, (min-width: 1024px) 30vw,  96vw"
			class="aspect-square w-full object-cover object-top"
		/> -->
		<div class="flex justify-between">
			<a
				class="grid grow items-center justify-start"
				href={primaryLink.href}
				aria-label={primaryLink.ariaLabel}
				target="_blank"
				rel="noopener"
			>
				<h3 class="text-fl-base">
					{title}
				</h3>
			</a>
			<ButtonFluid style="outlined">
				{t('home.projects.card.link-primary')}
			</ButtonFluid>
		</div>
	</article>
</project-card>

<script>
	class ProjectCard extends HTMLElement {
		constructor() {
			super()
			// Read the message from the data attribute.
			const image = this.querySelector('img')
			// const imageWrapper = this.querySelector('.image-wrapper')

			const button = this.querySelector('button')
			const overlay = this.querySelector(`#overlay-${this.dataset.title}`)

			// imageWrapper?.addEventListener('click', (event) => {
			// 	event.stopPropagation()

			// 	overlay?.classList.toggle('invisible')
			// 	overlay?.classList.toggle('opacity-0')
			// })

			// ðŸ’© For testing
			// overlay?.classList.toggle('invisible')
			// 	overlay?.classList.toggle('opacity-0')

			button?.addEventListener('click', (event) => {
				event.stopPropagation()

				overlay?.classList.toggle('invisible')
				overlay?.classList.toggle('opacity-0')
			})
			image?.addEventListener('click', (event) => {
				event.stopPropagation()

				overlay?.classList.toggle('invisible')
				overlay?.classList.toggle('opacity-0')
			})
			document.addEventListener('click', (event) => {
				if (!overlay?.classList.contains('invisible')) {
					overlay?.classList.toggle('invisible')
					overlay?.classList.toggle('opacity-0')
				}
			})
			overlay?.addEventListener('click', (event) => {
				// event.stopPropagation()
			})
		}
	}

	customElements.define('project-card', ProjectCard)
</script>
